name: unit_tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  ci_coverage:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        build_type: [ Debug ]
    env:
      COVERAGE_DIR: ${{github.workspace}}/coverage
    steps:
    - uses: actions/checkout@v2
    - name: Install lcov
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DENABLE_COVERAGE=ON
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} --parallel 10
    - name: Run tests
      working-directory: ${{github.workspace}}
      run: cd build ; ctest --build-config ${{ matrix.build_type }} --output-on-failure --parallel 10
    - name: Generate coverage files
      run: |
        mkdir ${{env.COVERAGE_DIR}}
        lcov --capture --directory . --output-file ${{env.COVERAGE_DIR}}/coverage.info
        lcov --remove ${{env.COVERAGE_DIR}}/coverage.info '/usr/*' --output-file ${{env.COVERAGE_DIR}}/coverage.info
        lcov --remove ${{env.COVERAGE_DIR}}/coverage.info '*/examples/*' --output-file ${{env.COVERAGE_DIR}}/coverage.info
        lcov --remove ${{env.COVERAGE_DIR}}/coverage.info '*/tests/*' --output-file ${{env.COVERAGE_DIR}}/coverage.info
        lcov --list ${{env.COVERAGE_DIR}}/coverage.info # debug info
    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ${{ env.COVERAGE_DIR }}/coverage.info
        # directory: ${{ env.COVERAGE_DIR }}
        # functionalities: gcov,gcovout
        env_vars: OS
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        verbose: true

  ci_gcc:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04, macos-10.15 ]
        compiler: [ g++-9, g++-10, g++-11 ]
        build_type: [ Debug ]
        exclude:
          - os: ubuntu-20.04
            compiler: g++-11
    steps:
    - uses: actions/checkout@v2
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_CXX_COMPILER="${{matrix.compiler}}" -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} --parallel 10
    - name: Run tests
      working-directory: ${{github.workspace}}
      run: cd build ; ctest --build-config ${{ matrix.build_type }} --output-on-failure --parallel 10

  ci_clang:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04 ]
        compiler: [ clang++-10, clang++-11 ] #, clang++-12 ]
        build_type: [ Debug ]
        include:
          - compiler: clang++-10
            clang_version: 10
          - compiler: clang++-11
            clang_version: 11
          # - compiler: clang++-12
          #   clang_version: 12
    steps:
    - uses: actions/checkout@v2
    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: ${{ matrix.clang_version }}
    - name: Configure CMake
      run: |
        clang++ --version
        cmake -B ${{github.workspace}}/build -DCMAKE_CXX_COMPILER="clang++" -DCMAKE_CXX_FLAGS="-stdlib=libc++" -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} --parallel 10
    - name: Run tests
      working-directory: ${{github.workspace}}
      run: cd build ; ctest --build-config ${{ matrix.build_type }} --output-on-failure --parallel 10

  ci_xcode:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-10.15 ]
        build_type: [ Debug ]
        xcode_version: [ 12.4, 11.7, 10.3 ]
    env:
      DEVELOPER_DIR: /Applications/Xcode_${{ matrix.xcode_version }}.app/Contents/Developer
    steps:
    - uses: actions/checkout@v2
    - name: Configure CMake
      run: |
        clang++ --version
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} --parallel 10
    - name: Run tests
      working-directory: ${{github.workspace}}
      run: cd build ; ctest --build-config ${{ matrix.build_type }} --output-on-failure --parallel 10

  ci_mingw:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-2019 ]
        architecture: [ x64, x86 ]
        build_type: [ Debug ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up MinGW
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: ${{ matrix.architecture }}
      - name: Configure CMake
        run: cmake -B build -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
      - name: Build
        run: cmake --build build --config ${{matrix.build_type}} --parallel 10
      - name: Run tests
        run: cd build ; ctest --build-config ${{ matrix.build_type }} --output-on-failure --parallel 10

  ci_msvc:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-2019 ]
        vsversion: [ Visual Studio 16 2019 ]
        build_type: [ Debug ]
        architecture: [ Win32, x64 ]
    steps:
    - uses: actions/checkout@v2
    - name: Configure CMake
      run: cmake -B build -G "${{ matrix.vsversion }}" -A ${{ matrix.architecture }}
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }} --parallel 10
    - name: Run tests
      run: cd build ; ctest --build-config ${{ matrix.build_type }} --output-on-failure --parallel 10
