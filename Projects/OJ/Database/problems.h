// generated by /home/langningc2009/sqlpp11/scripts/sqlite2cpp.py ./Database/problems.sql ./Database/problems DatabaseTables
#ifndef DATABASETABLES_PROBLEMS_H
#define DATABASETABLES_PROBLEMS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace DatabaseTables
{
  namespace Problems_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Title
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "title";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T title;
            T& operator()() { return title; }
            const T& operator()() const { return title; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Description
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "description";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T description;
            T& operator()() { return description; }
            const T& operator()() const { return description; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Input
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "input";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T input;
            T& operator()() { return input; }
            const T& operator()() const { return input; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Output
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "output";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T output;
            T& operator()() { return output; }
            const T& operator()() const { return output; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Range
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "range";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T range;
            T& operator()() { return range; }
            const T& operator()() const { return range; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Hint
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "hint";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hint;
            T& operator()() { return hint; }
            const T& operator()() const { return hint; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Samples
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "samples";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T samples;
            T& operator()() { return samples; }
            const T& operator()() const { return samples; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct TestCases
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "testCases";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T testCases;
            T& operator()() { return testCases; }
            const T& operator()() const { return testCases; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace Problems_

  struct Problems: sqlpp::table_t<Problems,
               Problems_::Id,
               Problems_::Title,
               Problems_::Description,
               Problems_::Input,
               Problems_::Output,
               Problems_::Range,
               Problems_::Hint,
               Problems_::Samples,
               Problems_::TestCases>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "problems";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T problems;
        T& operator()() { return problems; }
        const T& operator()() const { return problems; }
      };
    };
  };
} // namespace DatabaseTables
#endif
