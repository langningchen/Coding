// generated by /home/langningc2009/sqlpp11/scripts/sqlite2cpp.py ./Database/token.sql ./Database/token DatabaseTables
#ifndef DATABASETABLES_TOKEN_H
#define DATABASETABLES_TOKEN_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace DatabaseTables
{
  namespace Token_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Token
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "token";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T token;
            T& operator()() { return token; }
            const T& operator()() const { return token; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Uid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "uid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T uid;
            T& operator()() { return uid; }
            const T& operator()() const { return uid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct ExpireTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "expire_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T expireTime;
            T& operator()() { return expireTime; }
            const T& operator()() const { return expireTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace Token_

  struct Token: sqlpp::table_t<Token,
               Token_::Id,
               Token_::Token,
               Token_::Uid,
               Token_::ExpireTime>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "token";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T token;
        T& operator()() { return token; }
        const T& operator()() const { return token; }
      };
    };
  };
} // namespace DatabaseTables
#endif
